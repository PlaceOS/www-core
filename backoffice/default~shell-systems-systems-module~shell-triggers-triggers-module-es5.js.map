{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js"],"names":["DragCSSStyleDeclaration","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","DragRefConfig","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRefInternal","DragHelperTemplate","DragPreviewTemplate","Point","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","forEach","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","transform","add","direction","container","position","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","pipe","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","pageX","_scrollPosition","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","oldScrollPosition","currentScrollPosition","getViewportScrollPosition","topDifference","leftDifference","newValue","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","CachedItemPosition","ScrollPosition","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRefInternal","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_parentPositions","Map","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","push","_cacheItemPositions","_reset","items","_withDropContainer","connectedTo","slice","orientation","elements","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","set","scrollPosition","scrollTop","scrollLeft","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","_cacheParentPositions","scrolledParent","newTop","newLeft","scrolledParentNode","documentElement","get","_sortFromLastPointerPosition","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_updateAfterScroll","isReceiving","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ctorParameters","decorators","args","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CdkDragStart","CdkDragRelease","CdkDragEnd","CdkDragEnter","CdkDragExit","CdkDragDrop","CdkDragMove","CdkDragSortEvent","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","ɵdir","selectors","hostAttrs","inputs","propDecorators","selector","host","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","data","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CDK_DRAG_CONFIG","DragDropConfig","CDK_DRAG_CONFIG_FACTORY","CDK_DROP_LIST","CdkDrag","dropContainer","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","filter","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","emit","markForCheck","draggingDisabled","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","CdkDrag_HostBindings","outputs","exportAs","features","provide","useExisting","descendants","providers","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropListInternal","ɵ0","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","CdkDropList_HostBindings","useValue","DragDropModule","ɵmod","ɵinj","DragDropModule_Factory","ngJitMode","declarations","exports"],"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","file":"default~shell-systems-systems-module~shell-triggers-triggers-module-es5.js","sourcesContent":["import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/client-rect.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param {?} rect ClientRect to check against.\n * @param {?} threshold Threshold around the ClientRect.\n * @param {?} pointerX Coordinates along the X axis.\n * @param {?} pointerY Coordinates along the Y axis.\n * @return {?}\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    /** @type {?} */\n    const xThreshold = width * threshold;\n    /** @type {?} */\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n    /**\n     * `z-index` for the absolutely-positioned elements that are created by the drag item.\n     * @type {?|undefined}\n     */\n    DragRefConfig.prototype.zIndex;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Template that can be used to create a drag preview element.\n * @record\n * @template T\n */\nfunction DragPreviewTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragPreviewTemplate.prototype.matchSize;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     * @return {?}\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            (/** @type {?} */ (this))._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            }));\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n            this._initialContainer = this._dropContainer;\n            this._initialIndex = this._dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = (/** @type {?} */ (undefined));\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateOnScroll();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        /** @type {?} */\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if ((/** @type {?} */ (previewConfig)).matchSize) {\n                matchElementSize(preview, this._rootElement);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} point\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(point) {\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /**\n     * Updates the internal state of the draggable element when scrolling has occurred.\n     * @private\n     * @return {?}\n     */\n    _updateOnScroll() {\n        /** @type {?} */\n        const oldScrollPosition = this._scrollPosition;\n        /** @type {?} */\n        const currentScrollPosition = this._viewportRuler.getViewportScrollPosition();\n        // ClientRect dimensions are based on the page's scroll position so\n        // we have to update the cached boundary ClientRect if the user has scrolled.\n        if (oldScrollPosition && this._boundaryRect) {\n            /** @type {?} */\n            const topDifference = oldScrollPosition.top - currentScrollPosition.top;\n            /** @type {?} */\n            const leftDifference = oldScrollPosition.left - currentScrollPosition.left;\n            adjustClientRect(this._boundaryRect, topDifference, leftDifference);\n        }\n        this._scrollPosition = currentScrollPosition;\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Index at which the item started in its initial container.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialIndex;\n    /**\n     * Cached scroll position on the page when the element was picked up.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollPosition;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return (/** @type {?} */ (rootNodes[0]));\n    }\n    /** @type {?} */\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => wrapper.appendChild(node)));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param {?} target Element that needs to be resized.\n * @param {?} source Element whose size needs to be matched.\n * @return {?}\n */\nfunction matchElementSize(target, source) {\n    /** @type {?} */\n    const sourceRect = source.getBoundingClientRect();\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Cached positions of the scrollable parent elements.\n         */\n        this._parentPositions = new Map();\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || ((/** @type {?} */ (styles))).scrollSnapType || '';\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?=} index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 11.0.0 `previousIndex` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @param {?=} previousIndex Index of the item when dragging started.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} elements Elements that can be scrolled.\n     * @return {THIS}\n     */\n    withScrollableParents(elements) {\n        /** @type {?} */\n        const element = coerceElement((/** @type {?} */ (this)).element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        (/** @type {?} */ (this))._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.forEach((/**\n         * @param {?} position\n         * @param {?} element\n         * @return {?}\n         */\n        (position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections((/** @type {?} */ (element)), position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = (/** @type {?} */ (element));\n                }\n            }\n        }));\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the positions of the configured scrollable parents.\n     * @private\n     * @return {?}\n     */\n    _cacheParentPositions() {\n        this._parentPositions.clear();\n        this._parentPositions.set(this._document, {\n            scrollPosition: (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition(),\n        });\n        this._scrollableElements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => {\n            /** @type {?} */\n            const clientRect = getMutableClientRect(element);\n            // We keep the ClientRect cached in two properties, because it's referenced in a lot of\n            // performance-sensitive places and we want to avoid the extra lookups. The `element` is\n            // guaranteed to always be in the `_scrollableElements` so this should always match.\n            if (element === this.element) {\n                this._clientRect = clientRect;\n            }\n            this._parentPositions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect\n            });\n        }));\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrolledParent Element that was scrolled.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @return {?}\n     */\n    _updateAfterScroll(scrolledParent, newTop, newLeft) {\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support `contains`\n        // on the `document`.\n        /** @type {?} */\n        const scrolledParentNode = scrolledParent === this._document ? scrolledParent.documentElement : scrolledParent;\n        /** @type {?} */\n        const scrollPosition = (/** @type {?} */ (this._parentPositions.get(scrolledParent))).scrollPosition;\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this._parentPositions.forEach((/**\n         * @param {?} position\n         * @param {?} node\n         * @return {?}\n         */\n        (position, node) => {\n            if (position.clientRect && scrolledParent !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        }));\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const target = (/** @type {?} */ (event.target));\n                /** @type {?} */\n                const position = this._parentPositions.get(target);\n                if (position) {\n                    /** @type {?} */\n                    let newTop;\n                    /** @type {?} */\n                    let newLeft;\n                    if (target === this._document) {\n                        /** @type {?} */\n                        const scrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                        newTop = scrollPosition.top;\n                        newLeft = scrollPosition.left;\n                    }\n                    else {\n                        newTop = ((/** @type {?} */ (target))).scrollTop;\n                        newLeft = ((/** @type {?} */ (target))).scrollLeft;\n                    }\n                    this._updateAfterScroll(target, newTop, newLeft);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            /** @type {?} */\n            const shadowRoot = (/** @type {?} */ (_getShadowRoot(coerceElement(this.element))));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Cached positions of the scrollable parent elements.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._parentPositions;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Elements that can be scrolled while the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollableElements;\n    /**\n     * Initial value for the element's `scroll-snap-type` style.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._initialScrollSnap;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /**\n     * Whether the preview should preserve the same size as the item that is being dragged.\n     * @return {?}\n     */\n    get matchSize() { return this._matchSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragPreview.ngAcceptInputType_matchSize;\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragPreview.prototype._matchSize;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n * @record\n */\nfunction DragDropConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.lockAxis;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.dragStartDelay;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.constrainPosition;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.previewClass;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.boundaryElement;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.rootElementSelector;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.draggingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.sortingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listAutoScrollDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listOrientation;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.zIndex;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     * @param {?=} _scrollDispatcher\n     * @param {?=} config\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group, _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Registers an items with the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Removes an item from the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Gets the registered items in the list, sorted by their position in the DOM.\n     * @return {?}\n     */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            /** @type {?} */\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                /** @type {?} */\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map((/**\n                 * @param {?} scrollable\n                 * @return {?}\n                 */\n                scrollable => scrollable.getElementRef().nativeElement));\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /**\n     * Syncs up the registered drag items with underlying drop list ref.\n     * @private\n     * @return {?}\n     */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._dragRef)));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Whether the element's scrollable parents have been resolved.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollableParentsResolved;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._unsortedItems;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * \\@breaking-change 11.0.0\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map"]}