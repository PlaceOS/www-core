{"version":3,"sources":["webpack:///src/app/shell/repositories/about/repository-about.component.ts","webpack:///src/app/shell/repositories/about/repository-about.template.html","webpack:///src/app/shell/repositories/drivers/repository-drivers.component.ts","webpack:///src/app/shell/repositories/drivers/repository-drivers.template.html","webpack:///src/app/shell/repositories/repositories.component.ts","webpack:///src/app/shell/repositories/repositories.template.html","webpack:///src/app/shell/repositories/repositories.module.ts","webpack:///src/app/shell/repositories/repositories.routes.ts"],"names":["RepositoryAboutComponent","_service","subscription","listen","item","pulling","Repositories","pullCommit","id","then","err","notifyError","JSON","stringify","response","message","selector","templateUrl","styleUrls","RepositoryDriversComponent","_dialog","driver_list","load","changes","offset","loading","listDrivers","list","driver","open","height","width","maxHeight","maxWidth","data","Drivers","name","module_name","repository_id","file_name","service","RepositoriesComponent","_route","_router","title","query","driver_count","length","modal_ref","componentInstance","event","subscribe","reason","navigate","metadata","afterClosed","unsub","content","icon","type","set","close","sidebarEvent","itemEvent","AppRepositoriesModule","forChild","declarations","imports","ROUTES","path","component","children","redirectTo"],"mappings":"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","file":"shell-repositories-repositories-module-es5.js","sourcesContent":["\nimport { Component, Input, OnInit } from '@angular/core';\nimport { EngineRepository } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\n\n@Component({\n    selector: 'repository-about',\n    templateUrl: './repository-about.template.html',\n    styleUrls: ['./repository-about.styles.scss']\n})\nexport class RepositoryAboutComponent extends BaseDirective implements OnInit {\n    /** Repository to display details about */\n    @Input() public item: EngineRepository;\n    /** Whether the latest commit is being pulled on the server */\n    public pulling: boolean;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item', item => {\n                this.item = item;\n            })\n        );\n    }\n\n    /**\n     * Send request to server to pull the latest commit for the active repository\n     */\n    public pullLatestCommit() {\n        this.pulling = true;\n        this._service.Repositories.pullCommit(this.item.id)\n            .then(\n                () => this.pulling = false,\n                err => {\n                    this.pulling = false;\n                    this._service.notifyError(`Error pulling latest commit. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                }\n            );\n    }\n\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section class=\"actions\">\n        <mat-card>\n            <mat-card-content>\n                Pull the latest commit for<br>\n                this repository\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button [disabled]=\"pulling\" (tapped)=\"pullLatestCommit()\">\n                    <ng-container *ngIf=\"!pulling; else spinner\">Pull</ng-container>\n                </button>\n            </mat-card-actions>\n        </mat-card>\n    </section>\n    <section class=\"details\">\n        <div class=\"field\">\n            <label>Type:</label>\n            <div class=\"value\">{{ item.type ? 'Interface' : 'Driver' }} Repository</div>\n        </div>\n        <div class=\"field\">\n            <label>Folder name:</label>\n            <div class=\"value\">{{ item.folder_name || 'No folder set' }}</div>\n        </div>\n        <div class=\"field\">\n            <label>Repository URI:</label>\n            <div class=\"value\"><a [href]=\"item.uri | safe:'url'\">{{ item.uri || 'No URI set' }}</a></div>\n        </div>\n        <div class=\"field\">\n            <label>Description:</label>\n            <div class=\"value\">{{ item.description || 'No description' }}</div>\n        </div>\n    </section>\n</div>\n<ng-template #spinner>\n    <div class=\"spinner\">\n        <mat-spinner diameter=\"32\"></mat-spinner>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { EngineRepository, EngineDriver } from '@placeos/ts-client';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ItemCreateUpdateModalComponent,\n    CreateEditModalData\n} from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'repository-drivers',\n    templateUrl: './repository-drivers.template.html',\n    styleUrls: ['./repository-drivers.styles.scss']\n})\nexport class RepositoryDriversComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active repository */\n    @Input() public item: EngineRepository;\n    /** Whether driver list is loading */\n    public loading: boolean;\n    /** List of drivers available in the repository */\n    public driver_list: string[] = [];\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item', item => {\n                this.item = item;\n                this.load();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.load();\n        }\n    }\n\n    public load(offset: number = 0) {\n        if (!this.item) {\n            return;\n        }\n        this.loading = true;\n        this._service.Repositories.listDrivers(this.item.id, { offset } as any).then(\n            list => {\n                this.loading = false;\n                this.driver_list = list || [];\n            },\n            () => this.loading = false\n        );\n    }\n\n    public newDriver(driver: string) {\n        if (this.item.id) {\n            this._dialog.open<ItemCreateUpdateModalComponent, CreateEditModalData>(\n                ItemCreateUpdateModalComponent,\n                {\n                    height: 'auto',\n                    width: 'auto',\n                    maxHeight: 'calc(100vh - 2em)',\n                    maxWidth: 'calc(100vw - 2em)',\n                    data: {\n                        item: new EngineDriver(this._service.Drivers, {\n                            name: '',\n                            module_name: '',\n                            repository_id: this.item.id,\n                            file_name: driver\n                        }),\n                        service: this._service.Drivers\n                    }\n                }\n            );\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <h3>Available Drivers</h3>\n    <div class=\"settings\" *ngIf=\"!loading; else load_state\">\n        <table *ngIf=\"driver_list && driver_list.length > 0\">\n            <thead>\n                <td class=\"flex\">Name</td>\n                <td>\n\n                </td>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let item of driver_list\">\n                    <td [innerHTML]=\"item | driverFormat\">\n                    </td>\n                    <td class=\"small\">\n                        <button mat-icon-button (tapped)=\"newDriver(item)\">\n                            <app-icon [icon]=\"{ class: 'material-icons', content: 'add' }\"></app-icon>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"info-block\" *ngIf=\"!driver_list || driver_list.length <= 0\">\n            <div class=\"text\">No drivers for repository</div>\n        </div>\n    </div>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\">Loading driver list...</div>\n    </div>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineRepository } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalData,\n    ConfirmModalComponent,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'app-repositories',\n    templateUrl: './repositories.template.html',\n    styleUrls: ['./repositories.styles.scss']\n})\nexport class RepositoriesComponent extends BaseRootComponent<EngineRepository> {\n    /** Number of drivers in the repository */\n    public driver_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Repositories;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Repositories';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0 };\n        // Get repository count\n        this._service.Repositories.listDrivers(this.item.id, query).then(\n            list => (this.driver_count = list.length)\n        );\n    }\n\n    /**\n     * Open the modal to create a new repository\n     */\n    protected newItem() {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new EngineRepository(this._service.Repositories, {}),\n                service: this._service.Repositories\n            }\n        });\n        this.subscription('modal_event', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/repositories', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create edit the active repository\n     */\n    protected editItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Repositories\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    /**\n     * Delete the active repository\n     */\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete repository`,\n                        content: `<p>Are you sure you want delete this repository?</p><p>Deleting this repository will <strong>immediately</strong> remove it from all associated systems and zones</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe(async (event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting repository...';\n                        await this.item.delete().catch(err => {\n                            this.modal_ref.componentInstance.loading = null;\n                            this._service.notifyError(\n                                `Error deleting repository. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            throw err;\n                        });\n                        this._service.set('BACKOFFICE.removed', this.item.id);\n                        this._router.navigate(['/repositories']);\n                        this.modal_ref.close();\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Repositories\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"repository\"\n            route=\"repositories\"\n            [item]=\"item\"\n            [loading]=\"loading_item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                { id: 'drivers', name: 'Drivers', count: driver_count, icon: { class: 'backoffice-documents' } }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './repositories.routes';\n\nimport { RepositoriesComponent } from './repositories.component';\nimport { RepositoryAboutComponent } from './about/repository-about.component';\nimport { RepositoryDriversComponent } from './drivers/repository-drivers.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n    declarations: [\n        RepositoriesComponent,\n        RepositoryAboutComponent,\n        RepositoryDriversComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule\n    ]\n})\nexport class AppRepositoriesModule { }\n","import { Routes } from '@angular/router';\n\nimport { RepositoriesComponent } from './repositories.component';\nimport { RepositoryAboutComponent } from './about/repository-about.component';\nimport { RepositoryDriversComponent } from './drivers/repository-drivers.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: RepositoriesComponent,\n        children: [\n            { path: 'about', component: RepositoryAboutComponent },\n            { path: 'drivers', component: RepositoryDriversComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n"]}