{"version":3,"sources":["webpack:///src/app/shell/drivers/driver-about/driver-about.component.ts","webpack:///src/app/shell/drivers/driver-about/driver-about.template.html","webpack:///src/app/shell/drivers/driver-devices/driver-devices.component.ts","webpack:///src/app/shell/drivers/driver-devices/driver-devices.template.html","webpack:///src/app/shell/drivers/drivers.component.ts","webpack:///src/app/shell/drivers/drivers.template.html","webpack:///src/app/shell/drivers/drivers.module.ts","webpack:///src/app/shell/drivers/drivers.routes.ts"],"names":["DriverAboutComponent","_dialog","_service","subscription","listen","item","checkCompiled","ref","open","data","title","content","icon","type","componentInstance","event","subscribe","reason","loading","reload","then","notifySuccess","name","close","unsub","err","notifyError","Drivers","isCompiled","id","_","compiled","timeout","get","selector","templateUrl","styleUrls","search$","DriverModulesComponent","device_list","loadModules","search_results$","pipe","query","Modules","q","driver_id","complete","offset","limit","console","error","list","search","search_str","toLowerCase","filter","indexOf","email","changes","DriversComponent","_route","_router","service","device_count","last_total","length","modal_ref","height","width","maxHeight","maxWidth","module_name","navigate","metadata","afterClosed","set","sidebarEvent","itemEvent","AppDriversModule","forChild","declarations","imports","ROUTES","path","component","children","redirectTo"],"mappings":"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","file":"shell-drivers-drivers-module-es5.js","sourcesContent":["\nimport { Component, Input } from '@angular/core';\nimport { EngineDriver, EncryptionLevel } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmModalComponent, ConfirmModalData, CONFIRM_METADATA } from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: 'driver-about',\n    templateUrl: './driver-about.template.html',\n    styleUrls: ['./driver-about.styles.scss']\n})\nexport class DriverAboutComponent extends BaseDirective {\n    /** Item to render */\n    @Input() public item: EngineDriver;\n    /** Whether driver has a compiled binary on the server */\n    public compiled: boolean;\n\n    /** Whether application is loading settings for item */\n    public get loading_settings(): boolean {\n        return this._service.get('loading_settings');\n    }\n\n    constructor(private _dialog: MatDialog, private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item', item => {\n                this.item = item;\n            })\n        );\n        this.checkCompiled();\n    }\n\n    public reloadDriver() {\n        if (this.item) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Reload Driver`,\n                        content: `<p>Are you sure you want reload this driver?</p><p>New driver code will be loaded and device settings will be updated.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-cycle' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Reloading driver...';\n                        this.item.reload().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully reloaded driver \"${this.item.name}\".`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error reloading driver. Error: ${err}`);\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public checkCompiled() {\n        this._service.Drivers.isCompiled(this.item.id)\n            .then(_ => this.compiled = true, _ => {\n                this.compiled = false;\n                this.timeout('compiled', () => this.checkCompiled(), 1000)\n            })\n    }\n\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section>\n        <div class=\"field\">\n            <label>Compiled:</label>\n            <div class=\"value\">{{ compiled || 'false' }}</div>\n            <mat-spinner diameter=\"32\" *ngIf=\"!compiled\"></mat-spinner>\n        </div>\n        <div class=\"field\">\n            <label>Commit:</label>\n            <div class=\"value\">{{ item.commit }}</div>\n        </div>\n        <div class=\"field\">\n            <label>File Name:</label>\n            <div class=\"value\">{{ item.file_name }}</div>\n        </div>\n        <div class=\"field\">\n            <label>Module Name:</label>\n            <div class=\"value\">{{ item?.module_name }}</div>\n        </div>\n    </section>\n    <section>\n        <button mat-button (tapped)=\"reloadDriver()\">Reload Modules</button>\n    </section>\n    <hr />\n    <header class=\"settings\">Settings</header>\n    <section *ngIf=\"!loading_settings; else load_state\">\n        <a-settings-form [merge]=\"true\" [id]=\"item.id\" [settings]=\"item.settings\"></a-settings-form>\n    </section>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\">Loading driver settings...</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { EngineDriver, EngineModule } from '@placeos/ts-client';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable, Subject, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'driver-devices',\n    templateUrl: './driver-devices.template.html',\n    styleUrls: ['./driver-devices.styles.scss']\n})\nexport class DriverModulesComponent extends BaseDirective implements OnChanges, OnInit {\n    @Input() public item: EngineDriver;\n\n    /** Filter string for the system list */\n    public search_str: string;\n    /** List of Modules associated with the driver */\n    public device_list: EngineModule[] = [];\n    /** List of items from an API search */\n    public search_results$: Observable<EngineModule[]>;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** Whether systems are being loaded */\n    public loading: boolean;\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item', item => {\n                this.item = item;\n                this.loadModules();\n            })\n        );\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap(query => {\n                this.loading = true;\n                return this._service.Modules.query({\n                    q: query,\n                    driver_id: this.item.id,\n                    complete: true,\n                    offset: 0,\n                    limit: 500\n                } as any);\n            }),\n            catchError(err => {\n                console.error(err);\n                return of([]);\n            }),\n            map((list: EngineModule[]) => {\n                this.loading = false;\n                const search = this.search_str.toLowerCase();\n                return list.filter(\n                    (item: any) =>\n                        item.name.toLowerCase().indexOf(search) >= 0 ||\n                        (item.email || '').toLowerCase().indexOf(search) >= 0\n                );\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe(list => (this.device_list = list))\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadModules();\n        }\n    }\n\n    public loadModules(offset: number = 0) {\n        if (!this.item) { return; }\n        this._service.Modules.query({ driver_id: this.item.id, offset, limit: 500 }).then(\n            list => (this.device_list = list),\n            () => null\n        );\n    }\n\n    public removeModule(item: EngineModule) {\n        if (item) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete module`,\n                        content: `<p>Are you sure you want delete this module?</p><p>Deleting this will module <strong>immediately</strong> remove it from any system associated with it</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Deleting module...';\n                        item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted module \"${item.name}\".`\n                                );\n                                this.loadModules();\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting module. Error: ${err}`);\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <mat-form-field appearance=\"outline\">\n                <div class=\"prefix\" matPrefix>\n                    <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n                </div>\n                <input\n                    matInput\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Modules\"\n                />\n            </mat-form-field>\n        </section>\n        <section class=\"list\">\n            <table *ngIf=\"device_list && device_list.length > 0\">\n                <thead>\n                    <td class=\"small\">State</td>\n                    <td class=\"flex\">Name</td>\n                    <td class=\"system\">System</td>\n                    <td class=\"small\"></td>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let item of device_list\">\n                        <td class=\"small\">\n                            <div class=\"state\"\n                            [class.active]=\"item.running && item.connected\"\n                            [class.inactive]=\"item.running && !item.connected\"></div>\n                            <i binding [(model)]=\"item.connected\" [sys]=\"item.system.id\" [mod]=\"item.module_name\" bind=\"connected\"></i>\n                        </td>\n                        <td class=\"flex\">\n                            <a [routerLink]=\"['/modules', item.id]\" [matTooltip]=\"item.id\">{{item.name}}</a>\n                        </td>\n                        <td class=\"system\">\n                            <a [routerLink]=\"['/systems', item.control_system_id]\">\n                                {{item.system?.name}} (<span class=\"id\">{{item.control_system_id}}</span>)\n                            </a>\n                        </td>\n                        <td class=\"small\">\n                            <button mat-icon-button (tapped)=\"removeModule(item)\"><i class=\"backoffice-trash\"></i></button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"info-block\" *ngIf=\"!device_list || device_list.length <= 0\">\n                <div class=\"text\">No modules with driver</div>\n            </div>\n        </section>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineDriver } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'app-drivers',\n    templateUrl: './drivers.template.html',\n    styleUrls: ['./drivers.styles.scss']\n})\nexport class DriversComponent extends BaseRootComponent<EngineDriver> {\n    /** Number of devices for the active system */\n    public device_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Drivers;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Drivers';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0, limit: 1, driver_id: this.item.id };\n        this._service.Modules.query(query).then(list => {\n            this.device_count = this._service.Modules.last_total || list.length || 0;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected newItem() {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new EngineDriver(this._service.Drivers, { name: '', module_name: '' }),\n                service: this._service.Drivers\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/drivers', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected editItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Drivers\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete driver`,\n                        content: `<p>Are you sure you want delete this driver?</p><p>All modules that rely on this driver will be <strong>immediately</strong> removed.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting driver...';\n                        this.item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted driver \"${this.item.name}\".`\n                                );\n                                this._router.navigate(['/drivers']);\n                                this._service.set('BACKOFFICE.removed', this.item.id);\n                                this.modal_ref.close();\n                            },\n                            err => {\n                                this.modal_ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting driver. Error: ${err}`);\n                            }\n                        );\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Drivers\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"module\"\n            route=\"drivers\"\n            [item]=\"item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                { id: 'modules', name: 'Modules', count: device_count, icon: { class: 'backoffice-tablet' } }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './drivers.routes';\n\nimport { DriversComponent } from './drivers.component';\nimport { DriverAboutComponent } from './driver-about/driver-about.component';\nimport { DriverModulesComponent } from './driver-devices/driver-devices.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n    declarations: [\n        DriversComponent,\n        DriverAboutComponent,\n        DriverModulesComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule\n    ]\n})\nexport class AppDriversModule { }\n","\nimport { Routes } from '@angular/router';\n\nimport { DriversComponent } from './drivers.component';\nimport { DriverAboutComponent } from './driver-about/driver-about.component';\nimport { DriverModulesComponent } from './driver-devices/driver-devices.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id', component: DriversComponent, children: [\n            { path: 'about', component: DriverAboutComponent },\n            { path: 'modules', component: DriverModulesComponent },\n            { path: '**',      redirectTo: 'about' }\n        ]\n    },\n    { path: '**',      redirectTo: '-' }\n];\n"]}